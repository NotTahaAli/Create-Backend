import databasePool from "./db.service";

type location = { x: number; y: number; };

type organizationInfo = { id: number; domain: string; name: string; location: location; };

export async function getFromId(organizationId: number): Promise<false | organizationInfo> {
    let resp = await databasePool.query(`SELECT * FROM organizations WHERE id = $1`, [organizationId]);
    if (resp.rowCount == 0) return false;
    return resp.rows[0];
}

export async function getFromDomain(organizationDomain: string): Promise<false | organizationInfo> {
    let resp = await databasePool.query(`SELECT * FROM organizations WHERE domain = $1`, [organizationDomain]);
    if (resp.rowCount == 0) return false;
    return resp.rows[0];
}

export async function getAllFromName(organizationName: string): Promise<organizationInfo[]> {
    let resp = await databasePool.query(`SELECT * FROM organizations WHERE name LIKE '%' || $1 || '%'`, [organizationName]);
    return resp.rows;
}

export async function createOrganization(domain: string, name: string, location: location): Promise<false | organizationInfo> {
    if (typeof (domain) != "string" || typeof (name) != "string" || typeof (location) != "object" || typeof (location.x) != "number" || typeof (location.y) != "number") return false;
    let resp = await databasePool.query("INSERT INTO organizations(domain, name, location) VALUES($1, $2, point($3, $4)) RETURNING *", [domain, name, location.x, location.y]);
    if (resp.rowCount == 0) return false;
    return resp.rows[0];
}

export async function removeOrganization(id: number): Promise<false | number> {
    let resp = await databasePool.query("DELETE FROM organizations WHERE id = $1 RETURNING id", [id]);
    if (resp.rowCount == 0) return false;
    return resp.rows[0].id;
}

export async function createTable() {
    await databasePool.query(`CREATE TABLE IF NOT EXISTS "organizations" (
        "id" integer PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        "domain" text UNIQUE NOT NULL,
        "name" text NOT NULL,
        "location" point NOT NULL
      );`);
}

export default {
    getFromId,
    getFromDomain,
    getAllFromName,
    createOrganization,
    removeOrganization,
    createTable
}